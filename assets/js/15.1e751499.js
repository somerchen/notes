(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{401:function(v,_,e){"use strict";e.r(_);var c=e(52),a=Object(c.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"webpack-面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-面试题"}},[v._v("#")]),v._v(" Webpack 面试题")]),v._v(" "),e("h2",{attrs:{id:"webpack-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的作用"}},[v._v("#")]),v._v(" Webpack 的作用")]),v._v(" "),e("ul",[e("li",[v._v("模块打包。可以将不同模块的文件打包整合在一起，并且保证它们之间的"),e("strong",[v._v("引用正确，执行有序")]),v._v("。利用打包我们就可以在开发的时候根据我们自己的业务自由划分文件模块，保证项目结构的清晰和可读性。")]),v._v(" "),e("li",[v._v("编译兼容。在前端的“上古时期”，手写一堆浏览器兼容代码一直是令前端工程师头皮发麻的事情，而在今天这个问题被大大的弱化了，通过 "),e("code",[v._v("webpack")]),v._v(" 的"),e("strong",[v._v("Loader")]),v._v("机制，不仅仅可以帮助我们对代码做 "),e("code",[v._v("polyfill")]),v._v("，还可以编译转换诸如.less, .vue, .jsx 这类在浏览器无法识别的格式文件，让我们在开发的时候可以使用新特性和新语法做开发，提高开发效率。")]),v._v(" "),e("li",[v._v("能力扩展。通过 "),e("code",[v._v("webpack")]),v._v(" 的"),e("strong",[v._v("Plugin")]),v._v("机制，我们在实现模块化打包和编译兼容的基础上，可以进一步实现诸如按需加载，代码压缩等一系列功能，帮助我们进一步提高自动化程度，工程效率以及打包输出的质量。")])]),v._v(" "),e("h2",{attrs:{id:"webpack-的构建流程-打包原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的构建流程-打包原理"}},[v._v("#")]),v._v(" Webpack 的构建流程（打包原理）")]),v._v(" "),e("ul",[e("li",[v._v("读取"),e("code",[v._v("webpack")]),v._v("的配置参数：从配置文件和 shell 语句中读取与合并参数")]),v._v(" "),e("li",[v._v("启动"),e("code",[v._v("webpack")]),v._v("，创建"),e("code",[v._v("Compiler")]),v._v("对象并开始解析项目")]),v._v(" "),e("li",[v._v("从入口文件（"),e("code",[v._v("entry")]),v._v("）开始解析，并且找到其导入的依赖模块，递归遍历分析，形成依赖关系树")]),v._v(" "),e("li",[v._v("对不同文件类型的依赖模块文件使用对应的"),e("code",[v._v("Loader")]),v._v("进行编译，最终转为"),e("code",[v._v("Javascript")]),v._v("文件")]),v._v(" "),e("li",[v._v("整个过程中"),e("code",[v._v("webpack")]),v._v("会通过发布订阅模式，向外抛出一些"),e("code",[v._v("hooks")]),v._v("，而"),e("code",[v._v("webpack")]),v._v("的"),e("code",[v._v("plugin")]),v._v("即可通过监听这些关键的事件节点，执行插件任务进而达到干预输出结果的目的")]),v._v(" "),e("li",[v._v("在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])]),v._v(" "),e("h2",{attrs:{id:"loader-的作用是什么-怎么实现一个-loader-loader-的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#loader-的作用是什么-怎么实现一个-loader-loader-的实现原理"}},[v._v("#")]),v._v(" loader 的作用是什么？怎么实现一个 loader（loader 的实现原理）")]),v._v(" "),e("p",[e("code",[v._v("Webpack")]),v._v(" 最后打包出来的成果是一份 "),e("code",[v._v("Javascript")]),v._v(" 代码，实际上在 "),e("code",[v._v("Webpack")]),v._v(" 内部默认也只能够处理 "),e("code",[v._v("JS")]),v._v(" 模块代码，在打包过程中，会默认把所有遇到的文件都当作 "),e("code",[v._v("JavaScript")]),v._v(" 代码进行解析，因此当项目存在非 JS 类型文件时，我们需要先对其进行必要的转换，才能继续执行打包任务，这也是 "),e("code",[v._v("Loader")]),v._v(" 机制存在的意义。")]),v._v(" "),e("p",[v._v("针对每个文件类型，"),e("code",[v._v("loader")]),v._v(" 是支持以数组的形式配置多个的，因此 "),e("code",[v._v("webpack")]),v._v(" 会链式的调用每一个 "),e("code",[v._v("loader")]),v._v("，文件资源会从上一个 "),e("code",[v._v("loader")]),v._v(" 传递到下一个，而 "),e("code",[v._v("loader")]),v._v(" 的处理也遵循着从下到上的顺序，"),e("code",[v._v("loader")]),v._v(" 有以下开发原则")]),v._v(" "),e("ul",[e("li",[v._v("单一原则: 每个 "),e("code",[v._v("Loader")]),v._v(" 只做一件事，简单易用，便于维护；")]),v._v(" "),e("li",[v._v("链式调用: "),e("code",[v._v("Webpack")]),v._v(" 会按顺序链式调用每个 "),e("code",[v._v("Loader")]),v._v("；")]),v._v(" "),e("li",[v._v("统一原则: 遵循 "),e("code",[v._v("Webpack")]),v._v(" 制定的设计规则和结构，输入与输出均为字符串，各个 "),e("code",[v._v("Loader")]),v._v(" 完全独立，即插即用；")]),v._v(" "),e("li",[v._v("无状态原则：在转换不同模块时，不应该在 "),e("code",[v._v("loader")]),v._v(" 中保留状态；")])]),v._v(" "),e("h2",{attrs:{id:"有哪些常见的-loader-你使用过哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的-loader-你使用过哪些"}},[v._v("#")]),v._v(" 有哪些常见的 loader，你使用过哪些？")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("file-loader")]),v._v("、"),e("code",[v._v("image-loader")]),v._v("、"),e("code",[v._v("url-loader")]),v._v(" 处理图片")]),v._v(" "),e("li",[e("code",[v._v("babel-loader")]),v._v(" 把 es6 转化为 es5")]),v._v(" "),e("li",[e("code",[v._v("ts-loader")]),v._v("、"),e("code",[v._v("awesome-typescript-loader")]),v._v(" 把 ts 转为 js")]),v._v(" "),e("li",[e("code",[v._v("sass-loader")]),v._v(" 把 scss 转为 css")]),v._v(" "),e("li",[e("code",[v._v("css-loader")])]),v._v(" "),e("li",[e("code",[v._v("postcss-loader")]),v._v(" 为 css 代码添加前缀")]),v._v(" "),e("li",[e("code",[v._v("vue-loader")]),v._v(" 加载.vue 单文件组件")])]),v._v(" "),e("h2",{attrs:{id:"plugin-的作用是什么-怎么实现一个-plugin-plugin-的实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugin-的作用是什么-怎么实现一个-plugin-plugin-的实现原理"}},[v._v("#")]),v._v(" plugin 的作用是什么？怎么实现一个 plugin（plugin 的实现原理）")]),v._v(" "),e("p",[v._v("如果说 "),e("code",[v._v("Loader")]),v._v(" 负责文件转换，那么 "),e("code",[v._v("Plugin")]),v._v(" 便是负责功能扩展。")]),v._v(" "),e("p",[e("code",[v._v("Webpack")]),v._v(" 基于发布订阅模式，在运行的生命周期中会广播出许多事件，"),e("code",[v._v("Plugin")]),v._v(" 可以监听这些事件，在合适的时机通过 "),e("code",[v._v("Webpack")]),v._v(" 提供的 "),e("code",[v._v("API")]),v._v(" 改变输出结果")]),v._v(" "),e("p",[e("code",[v._v("Plugin")]),v._v(" 的开发和开发 "),e("code",[v._v("Loader")]),v._v(" 一样，需要遵循一些开发上的规范和原则：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("compiler")]),v._v(" 暴露了和 "),e("code",[v._v("Webpack")]),v._v(" 整个生命周期相关的钩子")]),v._v(" "),e("li",[e("code",[v._v("compilation")]),v._v(" 暴露了与模块和依赖有关的粒度更小的事件钩子")]),v._v(" "),e("li",[e("code",[v._v("plugin")]),v._v(" 的本质是类，这个类包含 "),e("code",[v._v("apply")]),v._v(" 方法，这样才能访问 "),e("code",[v._v("compiler")]),v._v(" 实例；")]),v._v(" "),e("li",[v._v("传给每个插件的 "),e("code",[v._v("compiler")]),v._v(" 和 "),e("code",[v._v("compilation")]),v._v(" 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件;")]),v._v(" "),e("li",[v._v("异步的事件需要在插件处理完任务时调用回调函数通知 "),e("code",[v._v("Webpack")]),v._v(" 进入下一个流程，不然会卡住;")])]),v._v(" "),e("h2",{attrs:{id:"有哪些常见的-plugin-你使用过哪些"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些常见的-plugin-你使用过哪些"}},[v._v("#")]),v._v(" 有哪些常见的 plugin，你使用过哪些？")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("html-webpack-plugin")]),v._v(" 简化 HTML 文件创建")]),v._v(" "),e("li",[e("code",[v._v("uglifyjs-webpack-plugin")]),v._v(" 压缩代码")]),v._v(" "),e("li",[e("code",[v._v("mini-css-extract-plugin")]),v._v(" 分离样式文件，CSS 提取为独立文件，支持按需加载")]),v._v(" "),e("li",[e("code",[v._v("clean-webpack-plugin")]),v._v(" 每次构建时清理上一次构建的文件")]),v._v(" "),e("li",[e("code",[v._v("webpack-bundle-analyzer")]),v._v(" 可视化 Webpack 输出文件的体积")])]),v._v(" "),e("h2",{attrs:{id:"你了解-sourcemap-吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#你了解-sourcemap-吗"}},[v._v("#")]),v._v(" 你了解 sourceMap 吗")]),v._v(" "),e("p",[e("code",[v._v("sourceMap")]),v._v(" 是一项将编译、打包、压缩后的代码映射回源代码的技术，由于打包压缩后的代码并没有阅读性可言，一旦在开发中报错或者遇到问题，直接在混淆代码中 "),e("code",[v._v("debug")]),v._v(" 问题会带来非常糟糕的体验，"),e("code",[v._v("sourceMap")]),v._v(" 可以帮助我们快速定位到源代码的位置，提高我们的开发效率。")]),v._v(" "),e("p",[e("code",[v._v("sourceMap")]),v._v(" 其实并不是 "),e("code",[v._v("Webpack")]),v._v(" 特有的功能，而是 "),e("code",[v._v("Webpack")]),v._v(" 支持 "),e("code",[v._v("sourceMap")]),v._v("，像 "),e("code",[v._v("JQuery")]),v._v(" 也支持 "),e("code",[v._v("sourceMap")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"说一下热更新-hrm-的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说一下热更新-hrm-的原理"}},[v._v("#")]),v._v(" 说一下热更新（HRM）的原理")]),v._v(" "),e("ul",[e("li",[v._v("第一步，在 "),e("code",[v._v("webpack")]),v._v(" 的 "),e("code",[v._v("watch")]),v._v(" 模式下，文件系统中某一个文件发生修改，"),e("code",[v._v("webpack")]),v._v(" 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 "),e("code",[v._v("JavaScript")]),v._v(" 对象保存在内存中。")]),v._v(" "),e("li",[v._v("第二步是 "),e("code",[v._v("webpack-dev-server")]),v._v(" 和 "),e("code",[v._v("webpack")]),v._v(" 之间的接口交互，而在这一步，主要是 "),e("code",[v._v("dev-server")]),v._v(" 的中间件 "),e("code",[v._v("webpack-dev-middleware")]),v._v(" 和 "),e("code",[v._v("webpack")]),v._v(" 之间的交互，"),e("code",[v._v("webpack-dev-middleware")]),v._v(" 调用 "),e("code",[v._v("webpack")]),v._v(" 暴露的 "),e("code",[v._v("API")]),v._v(" 对代码变化进行监控，并且告诉 "),e("code",[v._v("webpack")]),v._v("，将代码打包到内存中。")]),v._v(" "),e("li",[v._v("第三步是 "),e("code",[v._v("webpack-dev-server")]),v._v(" 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 "),e("code",[v._v("devServer.watchContentBase")]),v._v(" 为 "),e("code",[v._v("true")]),v._v(" 的时候，"),e("code",[v._v("Server")]),v._v(" 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 "),e("code",[v._v("live reload")]),v._v("。注意，这儿是浏览器刷新，和 "),e("code",[v._v("HMR")]),v._v(" 是两个概念。")]),v._v(" "),e("li",[v._v("第四步也是 "),e("code",[v._v("webpack-dev-server")]),v._v(" 代码的工作，该步骤主要是通过 "),e("code",[v._v("sockjs")]),v._v("（"),e("code",[v._v("webpack-dev-server")]),v._v(" 的依赖）在浏览器端和服务端之间建立一个 "),e("code",[v._v("websocket")]),v._v(" 长连接，将 "),e("code",[v._v("webpack")]),v._v(" 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 "),e("code",[v._v("Server")]),v._v(" 监听静态文件变化的信息。浏览器端根据这些 "),e("code",[v._v("socket")]),v._v(" 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 "),e("code",[v._v("hash")]),v._v(" 值，后面的步骤根据这一 "),e("code",[v._v("hash")]),v._v(" 值来进行模块热替换。")]),v._v(" "),e("li",[e("code",[v._v("webpack-dev-server/client")]),v._v(" 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 "),e("code",[v._v("webpack")]),v._v("，"),e("code",[v._v("webpack/hot/dev-server")]),v._v(" 的工作就是根据 "),e("code",[v._v("webpack-dev-server/client")]),v._v(" 传给它的信息以及 "),e("code",[v._v("dev-server")]),v._v(" 的配置决定是刷新浏览器，还是进行模块热更新。")]),v._v(" "),e("li",[e("code",[v._v("HotModuleReplacement.runtime")]),v._v(" 是客户端 "),e("code",[v._v("HMR")]),v._v(" 的中枢，它接收到上一步传递给他的新模块的 "),e("code",[v._v("hash")]),v._v(" 值，它通过 "),e("code",[v._v("JsonpMainTemplate.runtime")]),v._v(" 向 "),e("code",[v._v("server")]),v._v(" 端发送 "),e("code",[v._v("Ajax")]),v._v(" 请求，服务端返回一个 "),e("code",[v._v("json")]),v._v("，该 "),e("code",[v._v("json")]),v._v(" 包含了所有要更新的模块的 "),e("code",[v._v("hash")]),v._v(" 值，获取到更新列表后，该模块再次通过 "),e("code",[v._v("jsonp")]),v._v(" 请求，获取到最新的模块代码。")]),v._v(" "),e("li",[e("code",[v._v("HotModulePlugin")]),v._v(" 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。")]),v._v(" "),e("li",[v._v("最后一步，当 "),e("code",[v._v("HMR")]),v._v(" 失败后，回退到 "),e("code",[v._v("live reload")]),v._v(" 操作，也就是进行浏览器刷新来获取最新打包代码。")])]),v._v(" "),e("p",[v._v("简单来说，就是 "),e("code",[v._v("webpack")]),v._v(" 在 "),e("code",[v._v("watch")]),v._v(" 状态下监听到了文件的修改，然后通过与浏览器之间建立的 "),e("code",[v._v("websocket")]),v._v(" 通知浏览器哪些文件更改了，之后浏览器会重新获取资源然后替换该文件对应的模块。")]),v._v(" "),e("h2",{attrs:{id:"如何优化-webpack-的构建速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何优化-webpack-的构建速度"}},[v._v("#")]),v._v(" 如何优化 Webpack 的构建速度")]),v._v(" "),e("ul",[e("li",[v._v("使用高版本的 "),e("code",[v._v("webpack")]),v._v(" 和 "),e("code",[v._v("nodejs")])]),v._v(" "),e("li",[v._v("多线程构建 "),e("code",[v._v("thread-loader")])]),v._v(" "),e("li",[v._v("压缩代码 "),e("code",[v._v("uglifyjs-webpack-plugin")]),v._v(" "),e("code",[v._v("terser-webpack-plugin")])]),v._v(" "),e("li",[v._v("压缩图片 image-webpack-loader")]),v._v(" "),e("li",[v._v("缩小打包作用域")]),v._v(" "),e("li",[v._v("提取页面公共资源")]),v._v(" "),e("li",[v._v("使用 "),e("code",[v._v("DllPlugin")]),v._v(" 进行分包，把基本不会改变的代码打包成静态资源，避免反复编译浪费时间")]),v._v(" "),e("li",[v._v("利用缓存")]),v._v(" "),e("li",[e("code",[v._v("Tree Shaking")])])]),v._v(" "),e("h2",{attrs:{id:"如何减少打包出来的文件体积"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何减少打包出来的文件体积"}},[v._v("#")]),v._v(" 如何减少打包出来的文件体积")]),v._v(" "),e("ul",[e("li",[v._v("写代码时按需引入")]),v._v(" "),e("li",[v._v("提取公共文件")]),v._v(" "),e("li",[v._v("开启 "),e("code",[v._v("tree shaking")])])]),v._v(" "),e("p",[v._v("使用 "),e("code",[v._v("webpack-bundle-analyzer")]),v._v(" 查看打包出来的文件体积，然后针对性的优化")]),v._v(" "),e("h2",{attrs:{id:"聊一聊-babel-原理吧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聊一聊-babel-原理吧"}},[v._v("#")]),v._v(" 聊一聊 babel 原理吧")]),v._v(" "),e("p",[e("code",[v._v("babel")]),v._v(" 的作用是把 "),e("code",[v._v("es6")]),v._v(" 代码转为 "),e("code",[v._v("es5")]),v._v(" 代码，保证开发体验和效率的同时兼容了低版本浏览器")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("解析：将代码转换成 "),e("code",[v._v("AST")])])]),v._v(" "),e("li",[e("p",[v._v("转换：访问 "),e("code",[v._v("AST")]),v._v(" 的节点进行变换操作生产新的 "),e("code",[v._v("AST")])])]),v._v(" "),e("li",[e("p",[v._v("生成：以新的 "),e("code",[v._v("AST")]),v._v(" 为基础生成代码")])])]),v._v(" "),e("h2",{attrs:{id:"webpack5-和-webpack4-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack5-和-webpack4-有什么区别"}},[v._v("#")]),v._v(" webpack5 和 webpack4 有什么区别")]),v._v(" "),e("p",[e("code",[v._v("webpack5")]),v._v(" 相比 "),e("code",[v._v("webpack4")]),v._v(" 把很多的插件才有的功能实现了内置，比如 "),e("code",[v._v("tree shaking")]),v._v("、"),e("code",[v._v("缓存")]),v._v("、"),e("code",[v._v("压缩代码")]),v._v("、"),e("code",[v._v("启动服务")]),v._v("等")]),v._v(" "),e("p",[e("code",[v._v("webpack5")]),v._v(" 总体上来说更快（长久缓存），更小（tree shaking）")])])}),[],!1,null,null,null);_.default=a.exports}}]);