(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{406:function(t,a,s){"use strict";s.r(a);var r=s(52),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计模式面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式面试题"}},[t._v("#")]),t._v(" 设计模式面试题")]),t._v(" "),s("h2",{attrs:{id:"设计原则-solid"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原则-solid"}},[t._v("#")]),t._v(" 设计原则 SOLID")]),t._v(" "),s("h2",{attrs:{id:"观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[t._v("#")]),t._v(" 观察者模式")]),t._v(" "),s("p",[t._v("观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新")]),t._v(" "),s("h3",{attrs:{id:"发布订阅模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式"}},[t._v("#")]),t._v(" 发布订阅模式")]),t._v(" "),s("p",[t._v("发布-订阅模式其实是一种对象间一对多的依赖关系，当一个对象的状态发送改变时，所有依赖于它的对象都将得到状态改变的通知。")]),t._v(" "),s("p",[t._v("订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。")]),t._v(" "),s("h3",{attrs:{id:"发布订阅模式与观察者模式的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式与观察者模式的区别"}},[t._v("#")]),t._v(" 发布订阅模式与观察者模式的区别")]),t._v(" "),s("p",[t._v("发布订阅模式在观察者模式的基础上，增加了调度中心统一管理目标对象（发布者）的改变，通知观察者对象（订阅者），实现了发布者与订阅者的完全解藕。")]),t._v(" "),s("h2",{attrs:{id:"单例模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" 单例模式")]),t._v(" "),s("p",[t._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点，这样的模式就叫做单例模式。")])])}),[],!1,null,null,null);a.default=e.exports}}]);